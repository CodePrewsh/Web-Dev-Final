{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\JNG\\\\Downloads\\\\proj - Copy\\\\proj\\\\frontend\\\\src\\\\pages\\\\Dashboard.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport NotesForm from '../components/NotesForm';\nimport NotesItem from '../components/NotesItem';\nimport Spinner from '../components/Spinner';\nimport { getNotes, reset } from '../features/notes/notesSlice';\nimport { get } from 'mongoose';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Dashboard() {\n  _s();\n\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const {\n    user\n  } = useSelector(state => state.auth);\n  const {\n    notes,\n    isLoading,\n    isError,\n    message\n  } = useSelector(state => state.notes);\n  useEffect(() => {\n    if (isError) {\n      console.log(message);\n    }\n\n    if (!user) {\n      navigate('/login');\n    }\n\n    dispatch(getNotes());\n    return () => {\n      dispatch(reset());\n    };\n  }, [user, navigate, isError, message, dispatch]);\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"heading\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Welcome \", user && user.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Notes App\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NotesForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"content\",\n      children: notes.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notes\",\n        children: notes.map(notes => /*#__PURE__*/_jsxDEV(NotesItem, {\n          notes: notes\n        }, notes._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"You have not taken any Notes yet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Dashboard, \"6kw22+aQhZIjMwyG31xsYo2wpTs=\", false, function () {\n  return [useNavigate, useDispatch, useSelector, useSelector];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/JNG/Downloads/proj - Copy/proj/frontend/src/pages/Dashboard.jsx"],"names":["useEffect","useNavigate","useSelector","useDispatch","NotesForm","NotesItem","Spinner","getNotes","reset","get","Dashboard","navigate","dispatch","user","state","auth","notes","isLoading","isError","message","console","log","name","length","map","_id"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,8BAAhC;AACA,SAASC,GAAT,QAAoB,UAApB;;;;AAIA,SAASC,SAAT,GAAqB;AAAA;;AACnB,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAMW,QAAQ,GAAGT,WAAW,EAA5B;AAEA,QAAM;AAAEU,IAAAA;AAAF,MAAWX,WAAW,CAAEY,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAA5B;AACA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,SAAT;AAAoBC,IAAAA,OAApB;AAA6BC,IAAAA;AAA7B,MAAyCjB,WAAW,CACvDY,KAAD,IAAWA,KAAK,CAACE,KADuC,CAA1D;AAIAhB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIkB,OAAJ,EAAa;AACXE,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACD;;AAED,QAAI,CAACN,IAAL,EAAW;AACTF,MAAAA,QAAQ,CAAC,QAAD,CAAR;AACD;;AAEDC,IAAAA,QAAQ,CAACL,QAAQ,EAAT,CAAR;AAEA,WAAO,MAAM;AACXK,MAAAA,QAAQ,CAACJ,KAAK,EAAN,CAAR;AACD,KAFD;AAGD,GAdQ,EAcN,CAACK,IAAD,EAAOF,QAAP,EAAiBO,OAAjB,EAA0BC,OAA1B,EAAmCP,QAAnC,CAdM,CAAT;;AAgBA,MAAIK,SAAJ,EAAe;AACb,wBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE;AAAA,4BACE;AAAS,MAAA,SAAS,EAAC,SAAnB;AAAA,8BACE;AAAA,+BAAaJ,IAAI,IAAIA,IAAI,CAACS,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAME,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,YANF,eAQE;AAAS,MAAA,SAAS,EAAC,SAAnB;AAAA,gBACGN,KAAK,CAACO,MAAN,GAAe,CAAf,gBACC;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,kBACGP,KAAK,CAACQ,GAAN,CAAWR,KAAD,iBACT,QAAC,SAAD;AAA2B,UAAA,KAAK,EAAEA;AAAlC,WAAgBA,KAAK,CAACS,GAAtB;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cADD,gBAOC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AARJ;AAAA;AAAA;AAAA;AAAA,YARF;AAAA,kBADF;AAsBD;;GAnDQf,S;UACUT,W,EACAE,W,EAEAD,W,EAC8BA,W;;;KALxCQ,S;AAqDT,eAAeA,SAAf","sourcesContent":["import { useEffect } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { useSelector, useDispatch } from 'react-redux'\nimport NotesForm from '../components/NotesForm'\nimport NotesItem from '../components/NotesItem'\nimport Spinner from '../components/Spinner'\nimport { getNotes, reset } from '../features/notes/notesSlice'\nimport { get } from 'mongoose'\n\n\n\nfunction Dashboard() {\n  const navigate = useNavigate()\n  const dispatch = useDispatch()\n\n  const { user } = useSelector((state) => state.auth)\n  const { notes, isLoading, isError, message } = useSelector(\n    (state) => state.notes\n  )\n\n  useEffect(() => {\n    if (isError) {\n      console.log(message)\n    }\n\n    if (!user) {\n      navigate('/login')\n    }\n\n    dispatch(getNotes())\n\n    return () => {\n      dispatch(reset())\n    }\n  }, [user, navigate, isError, message, dispatch])\n\n  if (isLoading) {\n    return <Spinner />\n  }\n\n  return (\n    <>\n      <section className='heading'>\n        <h1>Welcome {user && user.name}</h1>\n        <p>Notes App</p>\n      </section>\n\n      <NotesForm />\n\n      <section className='content'>\n        {notes.length > 0 ? (\n          <div className='notes'>\n            {notes.map((notes) => (\n              <NotesItem key={notes._id} notes={notes} />\n            ))}\n          </div>\n        ) : (\n          <h3>You have not taken any Notes yet</h3>\n        )}\n      </section>\n    </>\n  )\n}\n\nexport default Dashboard\n"]},"metadata":{},"sourceType":"module"}