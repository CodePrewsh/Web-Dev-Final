{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport goalService from './notesService';\nconst initialState = {\n  notes: [],\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: ''\n}; // Create new goal\n\nexport const createNotes = createAsyncThunk('notes/create', async (notesData, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await notesService.createNotes(notesData, token);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n}); // Get user goals\n\nexport const getNotes = createAsyncThunk('notes/getAll', async (_, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await notesService.getNotes(token);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n}); // Delete user goal\n\nexport const deleteNotes = createAsyncThunk('notes/delete', async (id, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.user.token;\n    return await notesService.deleteNotes(id, token);\n  } catch (error) {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    return thunkAPI.rejectWithValue(message);\n  }\n});\nexport const notesSlice = createSlice({\n  name: 'notes',\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(createNotes.pending, state => {\n      state.isLoading = true;\n    }).addCase(createNotes.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.goals.push(action.payload);\n    }).addCase(createNotes.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(getNotes.pending, state => {\n      state.isLoading = true;\n    }).addCase(getNotes.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.notes = action.payload;\n    }).addCase(getNotes.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    }).addCase(deleteNotes.pending, state => {\n      state.isLoading = true;\n    }).addCase(deleteNotes.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isSuccess = true;\n      state.notes = state.notes.filter(notes => notes._id !== action.payload.id);\n    }).addCase(deleteNotes.rejected, (state, action) => {\n      state.isLoading = false;\n      state.isError = true;\n      state.message = action.payload;\n    });\n  }\n});\nexport const {\n  reset\n} = notesSlice.actions;\nexport default notesSlice.reducer;","map":{"version":3,"sources":["C:/Users/JNG/Downloads/proj - Copy/proj/frontend/src/features/notes/notesSlice.js"],"names":["createSlice","createAsyncThunk","goalService","initialState","notes","isError","isSuccess","isLoading","message","createNotes","notesData","thunkAPI","token","getState","auth","user","notesService","error","response","data","toString","rejectWithValue","getNotes","_","deleteNotes","id","notesSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","goals","push","payload","rejected","filter","_id","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport goalService from './notesService'\n\nconst initialState = {\n  notes: [],\n  isError: false,\n  isSuccess: false,\n  isLoading: false,\n  message: '',\n}\n\n// Create new goal\nexport const createNotes = createAsyncThunk(\n  'notes/create',\n  async (notesData, thunkAPI) => {\n    try {\n      const token = thunkAPI.getState().auth.user.token\n      return await notesService.createNotes(notesData, token)\n    } catch (error) {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n      return thunkAPI.rejectWithValue(message)\n    }\n  }\n)\n\n// Get user goals\nexport const getNotes = createAsyncThunk(\n  'notes/getAll',\n  async (_, thunkAPI) => {\n    try {\n      const token = thunkAPI.getState().auth.user.token\n      return await notesService.getNotes(token)\n    } catch (error) {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n      return thunkAPI.rejectWithValue(message)\n    }\n  }\n)\n\n// Delete user goal\nexport const deleteNotes = createAsyncThunk(\n  'notes/delete',\n  async (id, thunkAPI) => {\n    try {\n      const token = thunkAPI.getState().auth.user.token\n      return await notesService.deleteNotes(id, token)\n    } catch (error) {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n      return thunkAPI.rejectWithValue(message)\n    }\n  }\n)\n\nexport const notesSlice = createSlice({\n  name: 'notes',\n  initialState,\n  reducers: {\n    reset: (state) => initialState,\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(createNotes.pending, (state) => {\n        state.isLoading = true\n      })\n      .addCase(createNotes.fulfilled, (state, action) => {\n        state.isLoading = false\n        state.isSuccess = true\n        state.goals.push(action.payload)\n      })\n      .addCase(createNotes.rejected, (state, action) => {\n        state.isLoading = false\n        state.isError = true\n        state.message = action.payload\n      })\n      .addCase(getNotes.pending, (state) => {\n        state.isLoading = true\n      })\n      .addCase(getNotes.fulfilled, (state, action) => {\n        state.isLoading = false\n        state.isSuccess = true\n        state.notes = action.payload\n      })\n      .addCase(getNotes.rejected, (state, action) => {\n        state.isLoading = false\n        state.isError = true\n        state.message = action.payload\n      })\n      .addCase(deleteNotes.pending, (state) => {\n        state.isLoading = true\n      })\n      .addCase(deleteNotes.fulfilled, (state, action) => {\n        state.isLoading = false\n        state.isSuccess = true\n        state.notes= state.notes.filter(\n          (notes) => notes._id !== action.payload.id\n        )\n      })\n      .addCase(deleteNotes.rejected, (state, action) => {\n        state.isLoading = false\n        state.isError = true\n        state.message = action.payload\n      })\n  },\n})\n\nexport const { reset } = notesSlice.actions\nexport default notesSlice.reducer\n"]},"metadata":{},"sourceType":"module"}